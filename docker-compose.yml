version: '3.8'

x-airflow-common: &airflow-common
  image: apache/airflow:2.9.2-python3.11
  environment:
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__CORE__LOAD_EXAMPLES=False
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    # Variable pour pointer vers le fichier de credentials monté
    - GOOGLE_APPLICATION_CREDENTIALS=/opt/gcp/credentials.json
#   user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
 # user: "${AIRFLOW_UID:-50000}"
  user: "0:0"
  volumes:
    - .:/opt/airflow
    - ./dags:/opt/airflow/dags:ro
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    # On monte le dossier contenant les credentials
    - ./gcp:/opt/airflow/gcp:ro
    - ./src:/opt/airflow/src:ro
    # On monte le socket Docker pour permettre à Airflow de lancer des conteneurs
    - /var/run/docker.sock:/var/run/docker.sock
    # On monte tout le projet pour que les Dockerfiles soient accessibles au build
    - .:/opt/project
#  user: "${AIRFLOW_UID:-50000}" # Évite les problèmes de permission sur les fichiers créés

services:
  postgres:
    image: postgres:13
    container_name: airflow_postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      timeout: 5s
      retries: 5

  airflow-init:
    <<: *airflow-common
    container_name: airflow_init
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com &&
        airflow variables set 'openweather_api_key' '77703079fef55ae27765a4e7553e28e9' &&
        airflow variables set 'google_cloud_project' 'tr-weather-pipeline-2025'
      "

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow_scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    command: scheduler
    restart: on-failure

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow_webserver
    depends_on:
      airflow-scheduler:
        condition: service_started
    ports:
      - "8080:8080"
    command: webserver
    restart: on-failure

volumes:
  airflow_postgres_data:
